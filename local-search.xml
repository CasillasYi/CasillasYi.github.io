<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java 8 Optional最佳实践</title>
    <link href="/2020/03/11/002-optional%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <url>/2020/03/11/002-optional%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<p>Java从1.8之后引入了optional API，用以一定程度地避免NPE（<em>NullPointerException</em>）。然而可能很多人对这个精心设计的API还没那么熟练，甚至会有一些滥用。下面会详细讨论，然后给出我所认为的最佳实践。</p><h2 id="来自作者的说明"><a href="#来自作者的说明" class="headerlink" title="来自作者的说明"></a>来自作者的说明</h2><p>首先我们来看一下<code>Optional</code>的作者Brian Goetz对这个API的说明：</p><blockquote><p>Our intention was to provide a limited mechanism for library method return types where there needed to be a clear way to represent “no result”, and using <code>null</code> for such was overwhelmingly likely to cause errors.</p></blockquote><p>大意为，为了避免<code>null</code>带来的错误，我们提供了一个可以<strong>明确</strong>表示空值的有限的机制。</p><h2 id="基础理解"><a href="#基础理解" class="headerlink" title="基础理解"></a>基础理解</h2><p>首先，<code>Optional</code>是一个容器，用于放置可能为空的值，它可以合理而优雅的处理<code>null</code>。众所周知，<code>null</code>在编程历史上极具话题性，号称是<em>计算机历史上最严重的错误</em>，感兴趣可以读一下这篇文章：<strong><a href="https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/" target="_blank" rel="noopener">THE WORST MISTAKE OF COMPUTER SCIENCE</a></strong>，这里暂且不做过多讨论。在Java 1.8之前的版本，没有可以用于表示<code>null</code>官方API，如果你足够的谨慎，你可能需要常常在代码中做如下的判断：</p><pre><code class="java">if (null != user) {    //doing something}if (StringUtil.isEmpty(string)) {    //doing something}</code></pre><p>确实，返回值是<code>null</code>的情况太多了，一不小心，就会产生NPE，接踵而来的就是应用运行终止，产品抱怨，用户投诉。</p><p>1.8之后，jdk新增了<code>Optional</code>来表示空结果。其实本质上什么也没变，只是增加了一个表达方式。<code>Optional</code>表示空的静态方法为<code>Optional.empty()</code>，跟<code>null</code>有什么本质区别吗？其实没有。翻看它的实现，<code>Optional</code>中的value就是<code>null</code>，只不过包了一层<code>Optional</code>，所以说它其实是个容器。用之后的代码可能长这样：</p><pre><code class="java">// 1Optional&lt;User&gt; optionalUser = RemoteService.getUser();if (!optionalUser.isPresent()) {   //doing something }User user = optionalUser.get();// 2User user = optionalUser.get().orElse(new User());</code></pre><p>看起来，好像比之前好了一些，至少看起来没那么笨。但如果采用写法1，好像更啰嗦了。</p><p>如果你对kotlin稍有了解，kotlin的非空类型是他们大肆宣传的”卖点”之一，通过<code>var param!!</code>在使用它的地方做强制的空检查，否则无法通过编译，最大程度上减少了NPE。其实在我看来，<code>Optional</code>的方式更加优雅和灵活。同时，<code>Optional</code>也可能会带来一些误解。</p><p>下面先说一些在我看来的不合适的使用：</p><h2 id="Bad-Practice"><a href="#Bad-Practice" class="headerlink" title="Bad Practice"></a>Bad Practice</h2><h4 id="1-直接使用isPresent-进行if检查"><a href="#1-直接使用isPresent-进行if检查" class="headerlink" title="1. 直接使用isPresent()进行if检查"></a>1. 直接使用isPresent()进行if检查</h4><p>这个直接参考上面的例子，用<code>if</code>判断和1.8之前的写法并没有什么区别，反而返回值包了一层<code>Optional</code>，增加了代码的复杂性，没有带来任何实质的收益。其实<code>isPresent()</code>一般用于流处理的结尾，用于判断是否符合条件。</p><pre><code class="java">list.stream()    .filer(x -&gt; Objects.equals(x,param))    .findFirst()    .isPresent()</code></pre><h4 id="2-在方法参数中使用Optional"><a href="#2-在方法参数中使用Optional" class="headerlink" title="2. 在方法参数中使用Optional"></a>2. 在方法参数中使用Optional</h4><p>我们用一个东西之前得想明白，这东西是为解决什么问题而诞生的。<code>Optional</code>直白一点说就是为了表达可空性，如果方法参数可以为空，为何不重载呢？包括使用构造函数也一样。重载的业务表达更加清晰直观。</p><pre><code class="java">//don&#39;t write method like thispublic void getUser(long uid,Optional&lt;Type&gt; userType);//use Overloadpublic void getUser(long uid) {    getUser(uid,null);}public void getUser(long uid,UserType userType) {    //doing something}</code></pre><h4 id="3-直接使用Optional-get"><a href="#3-直接使用Optional-get" class="headerlink" title="3. 直接使用Optional.get"></a>3. 直接使用Optional.get</h4><p><code>Optional</code>不会帮你做任何的空判断或者异常处理，如果直接在代码中使用<code>Optional.get()</code>和不做任何空判断一样，十分危险。这种可能会出现在那种所谓的着急上线，着急交付，对<code>Optional</code>也不是很熟悉，直接就用了。这里多说一句，可能有人会反问了：甲方/业务着急，需求又多，哪有时间给他去做优化啊？因为我在现实工作中遇到过，但这两者并不矛盾，因为代码行数上差别并不大，只要自己平时保持学习，都是信手拈来的东西。</p><h4 id="4-使用在POJO中"><a href="#4-使用在POJO中" class="headerlink" title="4. 使用在POJO中"></a>4. 使用在POJO中</h4><p>估计很少有人这么用：</p><pre><code class="java">public class User {    private int age;    private String name;    private Optional&lt;String&gt; address;}</code></pre><p>这样的写法将会给序列化带来麻烦，<code>Optional</code>本身并没有实现序列化，现有的JSON序列化框架也没有对此提供支持的。</p><h4 id="5-使用在注入的属性中"><a href="#5-使用在注入的属性中" class="headerlink" title="5. 使用在注入的属性中"></a>5. 使用在注入的属性中</h4><p>这种写法估计用的人会更少，但不排除有脑洞的。</p><pre><code class="java">public class CommonService {    private Optional&lt;UserService&gt; userService;    public User getUser(String name) {        return userService.ifPresent(u -&gt; u.findByName(name));    }}</code></pre><p>首先依赖注入大多在spring的框架之下，直接使用<code>@Autowired</code>很方便。但如果使用以上的写法，如果<code>userService</code>set失败了，程序就应该终止并报异常，并不是无声无息，让其看起来什么问题都没有。</p><h2 id="Best-and-Pragmatic-Practice"><a href="#Best-and-Pragmatic-Practice" class="headerlink" title="Best and Pragmatic Practice"></a>Best and Pragmatic Practice</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>在说最佳实践前，让我们来看一下<code>Optional</code>都提供了哪些常用API。</p><h4 id="1-empty"><a href="#1-empty" class="headerlink" title="1. empty()"></a>1. <strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#empty--" target="_blank" rel="noopener">empty</a></strong>()</h4><p>返回一个<code>Optional</code>容器对象，而不是null。<strong>建议常用⭐⭐⭐⭐</strong></p><h4 id="2-of-T-value"><a href="#2-of-T-value" class="headerlink" title="2. of(T value)"></a>2. <strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#of-T-" target="_blank" rel="noopener">of</a>(T value)</strong></h4><p>创建一个<code>Optional</code>对象，如果value是null，则抛出NPE。<strong>不建议用⭐⭐</strong></p><h4 id="3-ofNullable-T-value"><a href="#3-ofNullable-T-value" class="headerlink" title="3. ofNullable(T value)"></a>3. <strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#ofNullable-T-" target="_blank" rel="noopener">ofNullable</a>(T value)</strong></h4><p>同上，创建一个<code>Optional</code>对象，但value为空时返回<code>Optional.empty()</code>。<strong>推荐使用⭐⭐⭐⭐⭐</strong></p><h4 id="4-get"><a href="#4-get" class="headerlink" title="4. get()"></a>4. <strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#get--" target="_blank" rel="noopener">get()</a></strong></h4><p>返回<code>Optional</code>中包装的值，在判空之前，千万不要直接使用！<strong>尽量别用！⭐</strong></p><h4 id="5-orElse-T-other"><a href="#5-orElse-T-other" class="headerlink" title="5. orElse(T other)"></a>5. <strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#orElse-T-" target="_blank" rel="noopener">orElse</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html" target="_blank" rel="noopener">T</a> other)</strong></h4><p>同样是返回<code>Optional</code>中包装的值，但不同的是当取不到值时，返回你指定的default。<strong>看似很好，但不建议用⭐⭐</strong></p><h4 id="6-orElseGet-Supplier-lt-extends-T-gt-other"><a href="#6-orElseGet-Supplier-lt-extends-T-gt-other" class="headerlink" title="6. orElseGet(Supplier&lt;? extends T&gt; other)"></a>6. <strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#orElseGet-java.util.function.Supplier-" target="_blank" rel="noopener">orElseGet</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html" target="_blank" rel="noopener">Supplier</a>&lt;? extends <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html" target="_blank" rel="noopener">T</a>&gt; other)</strong></h4><p>同样是返回<code>Optional</code>中包装的值，取不到值时，返回你指定的default。<strong>看似和5一样，但推荐使用⭐⭐⭐⭐⭐</strong></p><h4 id="7-orElseThrow-Supplier-lt-extends-X-gt-exceptionSupplier"><a href="#7-orElseThrow-Supplier-lt-extends-X-gt-exceptionSupplier" class="headerlink" title="7. orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)"></a>7. <strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#orElseThrow-java.util.function.Supplier-" target="_blank" rel="noopener">orElseThrow</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html" target="_blank" rel="noopener">Supplier</a>&lt;? extends X&gt; exceptionSupplier)</strong></h4><p>返回<code>Optional</code>中包装的值，取不到值时抛出指定的异常。<strong>阻塞性业务场景推荐使用⭐⭐⭐⭐</strong></p><h4 id="8-isPresent"><a href="#8-isPresent" class="headerlink" title="8. isPresent()"></a>8. <strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#isPresent--" target="_blank" rel="noopener">isPresent</a></strong>()</h4><p>判断<code>Optional</code>中是否有值，返回boolean，某些情况下很有用，但尽量不要用在if判断体中。<strong>可以用⭐⭐⭐</strong></p><h4 id="9-ifPresent-Consumer-lt-super-T-gt-consumer"><a href="#9-ifPresent-Consumer-lt-super-T-gt-consumer" class="headerlink" title="9. ifPresent(Consumer&lt;? super T&gt; consumer)"></a>9. <strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#ifPresent-java.util.function.Consumer-" target="_blank" rel="noopener">ifPresent</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html" target="_blank" rel="noopener">Consumer</a>&lt;? super <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html" target="_blank" rel="noopener">T</a>&gt; consumer)</strong></h4><p>判断<code>Optional</code>中是否有值，有值则执行consumer，否则什么都不干。<strong>日常情况下请使用这个⭐⭐⭐⭐</strong></p><h3 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h3><p>首先是一些基本原则：</p><ul><li>不要声明任何<code>Optional</code>实例属性</li><li>不要在任何setter或者构造方法中使用<code>Optional</code></li><li><code>Optional</code>属于返回类型，在业务返回值或者远程调用中使用</li></ul><h4 id="1-业务上需要空值时，不要直接返回null，使用Optional-empty"><a href="#1-业务上需要空值时，不要直接返回null，使用Optional-empty" class="headerlink" title="1. 业务上需要空值时，不要直接返回null，使用Optional.empty()"></a>1. 业务上需要空值时，不要直接返回null，使用<code>Optional.empty()</code></h4><pre><code class="java">public Optional&lt;User&gt; getUser(String name) {    if (StringUtil.isNotEmpty(name)) {        return RemoteService.getUser(name);    }     return Optional.empty();}</code></pre><h4 id="2-使用orElseGet"><a href="#2-使用orElseGet" class="headerlink" title="2. 使用orElseGet()"></a>2. 使用orElseGet()</h4><p>获取value有三种方式：<code>get()</code> <code>orElse()</code> <code>orElseGet()</code>。这里推荐在需要用到的地方只用 <code>orElseGet()</code>。</p><p>首先，<code>get()</code>不能直接使用，需要结合判空使用。这和<code>!=null</code>其实没多大区别，只是在表达和抽象上有所改善。</p><p>其次，为什么不推荐<code>orElse()</code>呢？因为<code>orElse()</code>无论如何都会执行括号中的内容， <code>orElseGet()</code>只在主体value是空时执行，下面看个例子：</p><pre><code class="java">public String getName() {    System.out.print(&quot;method called&quot;);}String name1 = Optional.of(&quot;String&quot;).orElse(getName()); //output: method calledString name2 = Optional.of(&quot;String&quot;).orElse(() -&gt; getName()); //output:</code></pre><p>如果上面的例子<code>getName()</code>方法是一个远程调用，或者涉及大量的文件IO，代价可想而知。</p><p>但 <code>orElse()</code>就一无是处吗？并不是。<code>orElseGet()</code>需要构建一个<code>Supplier</code>，如果只是简单的返回一个静态资源、字符串等等，直接返回<strong>静态</strong>资源即可。</p><pre><code class="java">public static final String USER_STATUS = &quot;UNKNOWN&quot;;...public String findUserStatus(long id) {    Optional&lt;String&gt; status = ... ; //     return status.orElse(USER_STATUS);}//不要这么写public String findUserStatus(long id) {    Optional&lt;String&gt; status = ... ; //     return status.orElse(&quot;UNKNOWN&quot;);//这样每次都会新建一个String对象}</code></pre><h4 id="3-使用orElseThrow"><a href="#3-使用orElseThrow" class="headerlink" title="3. 使用orElseThrow()"></a>3. 使用orElseThrow()</h4><p>这个针对阻塞性的业务场景比较合适，例如没有从上游获取到用户信息，下面的所有操作都无法进行，那此时就应该抛出异常。正常的写法是先判空，再手动throw异常，现在可以集成为一行：</p><pre><code class="java">public String findUser(long id) {    Optional&lt;User&gt; user = remoteService.getUserById(id) ;    return user.orElseThrow(IllegalStateException::new);}</code></pre><h4 id="4-不为空则执行时，使用ifPresent"><a href="#4-不为空则执行时，使用ifPresent" class="headerlink" title="4. 不为空则执行时，使用ifPresent()"></a>4. 不为空则执行时，使用ifPresent()</h4><p>这点没有性能上的优势，但可以使代码更简洁：</p><pre><code class="java">//之前是这样的if (status.isPresent()) {    System.out.println(&quot;Status: &quot; + status.get());}//现在status.ifPresent(System.out::println);</code></pre><h4 id="5-不要滥用"><a href="#5-不要滥用" class="headerlink" title="5. 不要滥用"></a>5. 不要滥用</h4><p>有些简单明了的方法，完全没必要增加<code>Optional</code>来增加复杂性。</p><pre><code class="java">public String fetchStatus() {    String status = getStatus() ;    return Optional.ofNullable(status).orElse(&quot;PENDING&quot;);}//判断一个简单的状态而已public String fetchStatus() {    String status = ... ;    return status == null ? &quot;PENDING&quot; : status;}</code></pre><h4 id="6-不要在集合中使用Optional"><a href="#6-不要在集合中使用Optional" class="headerlink" title="6. 不要在集合中使用Optional"></a>6. 不要在集合中使用Optional</h4><p>首先，null可以作为集合的元素之一，它并不是非法的；其次，集合类型本身已经具备了完整的空表达，再去包装一层<code>Optional</code>也是徒增复杂，收益甚微。例如，map已经有了<code>getOrDefault()</code>这样的类似<code>orElse()</code>的API了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Optional</code>的出现使Java对null的表达能力更近了一步，好马配好鞍，合理使用可以避免大量的NPE，节省大量的人力物力。以上内容也是本人查询了很多资料，边学边写的产出，如有错漏之处，还请不吝指教。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我为什么开始写博客了</title>
    <link href="/2020/03/05/hello-world/"/>
    <url>/2020/03/05/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>从今天开始，准备日常的去更新博客了。不算什么新鲜事，现在技术很成熟，群众基础也很广，任何一个没有技术基础的人都可以通过简单的配置搭建自己的博客。大概2年前，我就准备写了，当时也是通过hexo，找了一篇技术博客翻译了一下，也仅仅是发表了那一篇，后来因为<strong>懒</strong>就断更了。这一断就是2年，现在再次准备更新起来，换了一套博客主题，换了一种生活，换了一家公司，也更新了对很多事物的认知。</p><h2 id="为什么要写作"><a href="#为什么要写作" class="headerlink" title="为什么要写作"></a>为什么要写作</h2><h3 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h3><p>先引用一位业界大佬的话：</p><blockquote><p><em>You should blog even if you have no readers</em></p><p>——Nathan Marz</p></blockquote><p>这位Nathan Marz是大名鼎鼎的<a href="http://storm.apache.org/" target="_blank" rel="noopener">Apache Storm</a>的作者，他在2010年的一篇博客里阐述了他的想法，有兴趣可以看看：<a href="http://nathanmarz.com/blog/you-should-blog-even-if-you-have-no-readers.html" target="_blank" rel="noopener">You should blog even if you have no readers</a>。这篇文章说了三个点：</p><ul><li>写作会让你变成更好的读者</li><li>写作会让你更聪明</li><li>写作会带来一些附加价值：个人影响力等等</li></ul><p>举个例子，想要更好的学习一种技术或者理论，就向同事或者朋友们发起一次分享。因为要清楚地向别人阐述一个新的观点，你会逼自己更高效地的学习，然后更好地组织自己的语言和表达逻辑。写作则是假设自己的文章面向的全世界的读者，你需要组织自己的行文和思维，优秀的作者需要长期的积累。虽然大多数博客是默默无闻的，但这并不影响对自己的提升。尤其作为一名代码从业者，通过写博客，定期的总结，对自己的提升也会十分明显。</p><h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><p>这次爆发的疫情让我在家休了相当长的一个假，即使是学生时期的寒假也没有这么长。我也得以思考了很多之前没想明白的事。说出来不怕您笑话：<strong>人活着的意义是什么？</strong></p><p>这个问题可能随着年龄的增长大家都会或多或少的去想，茶余饭后，地铁公交上戴着耳机听歌时，半夜醒来等等时候，可能会在你的脑中闪过，大多数时候也仅仅是一闪而过。因为我们从出生开始就被一步步地赋予了社会属性，有人会告诉你什么时候该干什么，什么是对什么是错。可能也是偶尔，你会问自己，我为什么要做这个，为什么这就是对？</p><p>这次疫情期间，我家真的认真的想了这个问题。可幸的是，我觉得我想明白了。我觉得人活着的意义在于：<strong>分享</strong>。</p><p>艺术家们在通过作品向世人分享自己的思想，歌手们通过声音分享自己的情绪，富人们通过慈善向穷人分享自己的财富，运动员们用过自己高超的技艺向世人分享愉悦，开源作者们通过github等等的平台向世界分享自己的代码，这个世界上所有有价值的事都在于分享，只有分享了才会产生价值。在历史的长河中，那些分享了自己的能力的人，能力无论大小，都在推动着世界的进步。如果你只是通过工作向社会产生贡献，赚钱后享受生活，这完全没有任何问题，我这样持续了很多年，但每次都无法回答自己内心的疑问：我该如何证明我自己曾经存在于这个世界？</p><p>之前我不理解<em><code>狂热的开源爱好者</code></em>这个词，以为开源就开源呗，有什么好狂热的。现在才知道，这些人已经把开源和分享融入自己的生活，这就是他们生活的动力（可能说的有点夸张）。但确实自从想明白了这一点，才觉得他们属于那一些活明白的人。</p><p>本人是一名巴萨球迷，曾经的MSN三叉戟让人赏心悦目，但内马尔为钱前往了巴黎。当时觉得能理解他，比较巨额的财富面前，很少有人能拒绝。现在觉得这个举动毫无意义，在巴萨达到这个高度后，钱之于内马尔不说只是数字，完全也够他全家几辈子花的了。最终他还是选择了财富，让人很遗憾。在巴黎，像是跟一群小学生踢球，然后就是无尽的party。历史不会记住一个有钱人，只会记住传奇。对，我说的就是梅西。</p><p>所以，我决定开始写博客。<strong>向世界表达自己的认知，希望有人能看到，如果同时能给你带来帮助，那将会荣幸之至。</strong></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>写之前我调研了一众平台。</p><ul><li>在线博客平台：知乎，简书，medium，segment fault等</li><li>自建平台：Wordpress等</li><li>借助github page等托管的平台：hexo等</li></ul><p>首先，在成熟的平台写作会增加曝光度，也可能带来一些收入，但不是所有的文章都能发出来，他们本身存在一系列的审核机制，可能无意中的一个词命中了敏感词，就得去修改，这样来回反复很麻烦。</p><p>然后，成熟的平台没有自定义的样式主题；Wordpress等等的全家桶套装搭建和维护成本比较高，会分散一些精力，但工具本身一定要简洁好用，不能本末倒置。可能爱折腾的人并不会这么想。</p><p>所以，选择了相对简单且不会有严格审查的hexo+github pages。从配置到能写文章的状态，一共花了大半天，且以后的维护成本比较低。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>Hello World！我是一名代码从业者，后面我更多分享我技术上的总结。同时我也是一名摄影爱好者，一名巴萨球迷⚽️。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>Life</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
